{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ecc7903-a389-47aa-a74f-789e1c4714cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 导入必要的库\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import xgboost as xgb\n",
    "import joblib\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "# 加载模型\n",
    "xgb_model = joblib.load('xgb_model.pkl')\n",
    "\n",
    "# 加载数据（用于获取特征名称和范围）\n",
    "data = pd.read_csv('因果效应估计数据 - 副本.csv')\n",
    "\n",
    "# 初始化特征输入\n",
    "def init_input_features(data):\n",
    "    input_features = {}\n",
    "    for col in data.columns:\n",
    "        if col == 'event':\n",
    "            continue\n",
    "        dtype = data[col].dtype\n",
    "        if dtype == 'int64':\n",
    "            min_val, max_val = data[col].min(), data[col].max()\n",
    "            input_features[col] = st.sidebar.slider(col, int(min_val), int(max_val), int(data[col].mean()))\n",
    "        elif dtype == 'float64':\n",
    "            min_val, max_val = data[col].min(), data[col].max()\n",
    "            input_features[col] = st.sidebar.slider(col, float(min_val), float(max_val), float(data[col].mean()))\n",
    "        else:  # 类别型变量\n",
    "            unique_vals = data[col].unique()\n",
    "            input_features[col] = st.sidebar.selectbox(col, unique_vals)\n",
    "    return input_features\n",
    "\n",
    "# 主应用\n",
    "def main():\n",
    "    st.title('健康风险预测计算器')\n",
    "    \n",
    "    # 输入特征\n",
    "    input_features = init_input_features(data)\n",
    "    input_df = pd.DataFrame([input_features])\n",
    "    \n",
    "    # 预测发病风险\n",
    "    if st.button('预测发病风险'):\n",
    "        # 将输入数据转换为 XGBoost 的 DMatrix 格式\n",
    "        dinput = xgb.DMatrix(input_df)\n",
    "        \n",
    "        # 进行预测\n",
    "        pred_prob = xgb_model.predict(dinput)\n",
    "        \n",
    "        # 显示预测结果\n",
    "        st.write(f'当前发病风险: {pred_prob[0]:.2f}')\n",
    "        \n",
    "        # 可视化特征重要性\n",
    "        fig = go.Figure()\n",
    "        feature_importances = xgb_model.feature_importances_\n",
    "        feature_names = input_df.columns\n",
    "        fig.add_trace(go.Bar(x=feature_names, y=feature_importances))\n",
    "        fig.update_layout(title='特征重要性', xaxis_title='特征', yaxis_title='重要性')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
